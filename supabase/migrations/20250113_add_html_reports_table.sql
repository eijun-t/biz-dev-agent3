-- Add HTML Reports Table and Agent Logs Extensions
-- Writerエージェント用のテーブルとカラム追加

-- Create html_reports table
CREATE TABLE IF NOT EXISTS html_reports (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id UUID REFERENCES ideation_sessions(id) ON DELETE CASCADE,
  idea_id UUID REFERENCES business_ideas(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  html_content TEXT NOT NULL,
  sections JSONB NOT NULL DEFAULT '[]'::JSONB,
  metrics JSONB NOT NULL DEFAULT '{}'::JSONB,
  generated_at TIMESTAMPTZ DEFAULT NOW(),
  generation_time_ms INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  CONSTRAINT html_reports_generation_time_check CHECK (generation_time_ms >= 0),
  CONSTRAINT html_reports_sections_check CHECK (jsonb_array_length(sections) = 5)
);

-- Add indexes for performance
CREATE INDEX idx_html_reports_session_id ON html_reports(session_id);
CREATE INDEX idx_html_reports_idea_id ON html_reports(idea_id);
CREATE INDEX idx_html_reports_generated_at ON html_reports(generated_at DESC);

-- Add RLS policies for html_reports
ALTER TABLE html_reports ENABLE ROW LEVEL SECURITY;

-- Policy: Users can view their own reports
CREATE POLICY "Users can view own reports" ON html_reports
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM ideation_sessions
      WHERE ideation_sessions.id = html_reports.session_id
      AND ideation_sessions.user_id = auth.uid()
    )
  );

-- Policy: System can insert reports
CREATE POLICY "System can insert reports" ON html_reports
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM ideation_sessions
      WHERE ideation_sessions.id = html_reports.session_id
    )
  );

-- Policy: System can update reports
CREATE POLICY "System can update reports" ON html_reports
  FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM ideation_sessions
      WHERE ideation_sessions.id = html_reports.session_id
    )
  );

-- Add columns to agent_logs table for Writer agent progress tracking
ALTER TABLE agent_logs 
ADD COLUMN IF NOT EXISTS generation_phase TEXT,
ADD COLUMN IF NOT EXISTS completion_percentage INTEGER DEFAULT 0,
ADD CONSTRAINT agent_logs_completion_percentage_check 
  CHECK (completion_percentage >= 0 AND completion_percentage <= 100);

-- Create index for agent_logs generation tracking
CREATE INDEX IF NOT EXISTS idx_agent_logs_generation_phase 
  ON agent_logs(session_id, agent_name, generation_phase) 
  WHERE agent_name = 'writer';

-- Add updated_at trigger for html_reports
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_html_reports_updated_at
  BEFORE UPDATE ON html_reports
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Add comment for documentation
COMMENT ON TABLE html_reports IS 'Stores HTML reports generated by the Writer agent';
COMMENT ON COLUMN html_reports.sections IS 'JSON array of 5 report sections: summary, business_model, market, synergy, validation';
COMMENT ON COLUMN html_reports.metrics IS 'JSON object containing report metrics: TAM, PAM, SAM, revenue projections, etc.';
COMMENT ON COLUMN html_reports.generation_time_ms IS 'Time taken to generate the report in milliseconds';
COMMENT ON COLUMN agent_logs.generation_phase IS 'Current phase of report generation for Writer agent';
COMMENT ON COLUMN agent_logs.completion_percentage IS 'Progress percentage (0-100) for Writer agent tasks';