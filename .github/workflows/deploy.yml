name: Deploy Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run build test
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: github.event.inputs.environment != 'production'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy to Vercel Staging
      id: deploy
      run: |
        url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$url" >> $GITHUB_OUTPUT
        echo "Deployed to: $url"
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against ${{ steps.deploy.outputs.url }}"
        curl -f ${{ steps.deploy.outputs.url }} || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment:
      name: production
      url: https://biz-dev-agent3.vercel.app
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy to Vercel Production
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Notify deployment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://biz-dev-agent3.vercel.app',
            description: 'Deployment to production successful'
          })

  post-deploy-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run E2E tests
      run: |
        echo "Running E2E tests against deployed environment"
        # Add actual E2E test commands here
    
    - name: Check API health
      run: |
        if [ "${{ github.event.inputs.environment }}" == "production" ]; then
          URL="https://biz-dev-agent3.vercel.app"
        else
          URL="${{ needs.deploy-staging.outputs.url }}"
        fi
        curl -f $URL/api/health || exit 1
    
    - name: Send notification
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const environment = '${{ github.event.inputs.environment }}' || 'staging';
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `‚ö†Ô∏è Deployment to ${environment} completed but post-deployment validation failed. Please check the logs.`
          })

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: post-deploy-validation
    if: failure() && github.event.inputs.environment == 'production'
    
    steps:
    - name: Trigger rollback
      run: |
        echo "Triggering rollback to previous version"
        # Add Vercel rollback command here
    
    - name: Notify rollback
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: 'üîÑ Production deployment failed. Automatic rollback initiated.'
          })